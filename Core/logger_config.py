"""
Configuraci√≥n centralizada de logging para toda la aplicaci√≥n
Versi√≥n mejorada con m√°s funcionalidades y mejor estructura
"""

import logging
import sys
import os
from pathlib import Path
from decimal import Decimal, InvalidOperation
from datetime import datetime
from typing import Any, Optional, Dict
import functools
import traceback

class ColoredFormatter(logging.Formatter):
    """Formatter personalizado con colores para la consola"""
    
    # C√≥digos de color ANSI
    COLORS = {
        'DEBUG': '\033[36m',     # Cyan
        'INFO': '\033[32m',      # Verde
        'WARNING': '\033[33m',   # Amarillo
        'ERROR': '\033[31m',     # Rojo
        'CRITICAL': '\033[35m',  # Magenta
        'RESET': '\033[0m'       # Reset
    }
    
    def format(self, record):
        # Aplicar color solo si es para consola
        if hasattr(record, 'color_enabled') and record.color_enabled:
            color = self.COLORS.get(record.levelname, self.COLORS['RESET'])
            record.levelname = f"{color}{record.levelname}{self.COLORS['RESET']}"
        
        return super().format(record)

def configure_application_logging(
    log_level=logging.DEBUG,
    log_file='app.log',
    max_file_size=10*1024*1024,  # 10MB
    backup_count=5,
    enable_console_colors=True
):
    """
    Configura el sistema de logging para toda la aplicaci√≥n.
    Esta funci√≥n debe llamarse UNA SOLA VEZ al inicio de la aplicaci√≥n.
    
    Args:
        log_level: Nivel de logging (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        log_file: Nombre del archivo de log
        max_file_size: Tama√±o m√°ximo del archivo antes de rotar (bytes)
        backup_count: N√∫mero de archivos de backup a mantener
        enable_console_colors: Habilitar colores en la consola
    """
    
    # Verificar si ya se configur√≥ el logging root
    root_logger = logging.getLogger()
    if root_logger.handlers:
        return  # Ya est√° configurado, no hacer nada
    
    # Crear directorio de logs si no existe
    log_dir = Path('logs')
    log_dir.mkdir(exist_ok=True)
    log_file_path = log_dir / log_file
    
    # Formato detallado para archivo
    file_format = (
        '%(asctime)s | %(name)-20s | %(levelname)-8s | '
        '[%(filename)s:%(lineno)d] | %(funcName)s() | %(message)s'
    )
    
    # Formato m√°s limpio para consola
    console_format = (
        '%(asctime)s | %(levelname)-8s | %(name)-15s | %(message)s'
    )
    
    # Configurar handler para archivo con rotaci√≥n
    from logging.handlers import RotatingFileHandler
    file_handler = RotatingFileHandler(
        log_file_path,
        maxBytes=max_file_size,
        backupCount=backup_count,
        encoding='utf-8'
    )
    file_handler.setLevel(log_level)
    file_handler.setFormatter(logging.Formatter(file_format))
    
    # Configurar handler para consola
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(log_level)
    
    if enable_console_colors:
        console_formatter = ColoredFormatter(console_format)
        # A√±adir flag para habilitar colores
        old_emit = console_handler.emit
        def colored_emit(record):
            record.color_enabled = True
            return old_emit(record)
        console_handler.emit = colored_emit
    else:
        console_formatter = logging.Formatter(console_format)
    
    console_handler.setFormatter(console_formatter)
    
    # Configurar el logger root
    root_logger.setLevel(log_level)
    root_logger.addHandler(file_handler)
    root_logger.addHandler(console_handler)
    
    # Log inicial para confirmar configuraci√≥n
    logger = logging.getLogger(__name__)
    logger.info("=" * 60)
    logger.info("üöÄ SISTEMA DE LOGGING CONFIGURADO EXITOSAMENTE")
    logger.info("=" * 60)
    logger.info(f"üìÅ Archivo de log: {log_file_path}")
    logger.info(f"üìä Nivel de log: {logging.getLevelName(log_level)}")
    logger.info(f"üé® Colores en consola: {'‚úÖ' if enable_console_colors else '‚ùå'}")
    logger.info(f"üîÑ Rotaci√≥n de archivos: {max_file_size // (1024*1024)}MB, {backup_count} backups")
    logger.debug("Configuraci√≥n de logging completada exitosamente")

def get_logger(name: str) -> logging.Logger:
    """
    Obtiene un logger para el m√≥dulo especificado.
    No reconfigura el sistema de logging, solo retorna el logger.
    
    Args:
        name: Nombre del m√≥dulo (usar __name__)
    
    Returns:
        Logger configurado para el m√≥dulo
    """
    return logging.getLogger(name)

def log_function_entry(logger: logging.Logger, func_name: str, **kwargs):
    """
    Registra la entrada a una funci√≥n con sus par√°metros.
    
    Args:
        logger: Logger del m√≥dulo
        func_name: Nombre de la funci√≥n
        **kwargs: Par√°metros de la funci√≥n
    """
    if kwargs:
        params = ", ".join([f"{k}={_safe_repr(v)}" for k, v in kwargs.items()])
        logger.debug(f"üîµ ENTRADA ‚Üí {func_name}({params})")
    else:
        logger.debug(f"üîµ ENTRADA ‚Üí {func_name}()")

def log_function_exit(logger: logging.Logger, func_name: str, result=None, execution_time=None):
    """
    Registra la salida de una funci√≥n con su resultado.
    
    Args:
        logger: Logger del m√≥dulo
        func_name: Nombre de la funci√≥n
        result: Resultado de la funci√≥n (opcional)
        execution_time: Tiempo de ejecuci√≥n en segundos (opcional)
    """
    time_info = f" [{execution_time:.3f}s]" if execution_time else ""
    if result is not None:
        logger.debug(f"üî¥ SALIDA ‚Üê {func_name}{time_info} ‚Üí {_safe_repr(result)}")
    else:
        logger.debug(f"üî¥ SALIDA ‚Üê {func_name}{time_info}")

def log_exception(logger: logging.Logger, func_name: str, exception: Exception, context: str = ""):
    """
    Registra una excepci√≥n con informaci√≥n detallada.
    
    Args:
        logger: Logger del m√≥dulo
        func_name: Nombre de la funci√≥n donde ocurri√≥ la excepci√≥n
        exception: La excepci√≥n capturada
        context: Contexto adicional sobre la excepci√≥n
    """
    context_info = f" | Contexto: {context}" if context else ""
    logger.error(f"üí• EXCEPCI√ìN en {func_name}: {type(exception).__name__}: {exception}{context_info}")
    logger.debug(f"üìã Stack trace completo:\n{traceback.format_exc()}")

def log_performance(logger: logging.Logger, func_name: str, execution_time: float, threshold: float = 1.0):
    """
    Registra informaci√≥n de rendimiento de una funci√≥n.
    
    Args:
        logger: Logger del m√≥dulo
        func_name: Nombre de la funci√≥n
        execution_time: Tiempo de ejecuci√≥n en segundos
        threshold: Umbral en segundos para considerar lento
    """
    if execution_time > threshold:
        logger.warning(f"‚ö†Ô∏è RENDIMIENTO: {func_name} tard√≥ {execution_time:.3f}s (umbral: {threshold}s)")
    else:
        logger.debug(f"‚ö° RENDIMIENTO: {func_name} completado en {execution_time:.3f}s")

def log_database_operation(logger: logging.Logger, operation: str, table: str, affected_rows: int = None, query: str = None):
    """
    Registra operaciones de base de datos.
    
    Args:
        logger: Logger del m√≥dulo
        operation: Tipo de operaci√≥n (SELECT, INSERT, UPDATE, DELETE)
        table: Tabla afectada
        affected_rows: N√∫mero de filas afectadas
        query: Query SQL (opcional, solo para debug)
    """
    rows_info = f" | Filas: {affected_rows}" if affected_rows is not None else ""
    logger.info(f"üóÑÔ∏è DB {operation} en tabla '{table}'{rows_info}")
    if query and logger.isEnabledFor(logging.DEBUG):
        logger.debug(f"üìù Query: {query}")

def log_user_action(logger: logging.Logger, action: str, user: str = "system", details: str = ""):
    """
    Registra acciones del usuario.
    
    Args:
        logger: Logger del m√≥dulo
        action: Acci√≥n realizada
        user: Usuario que realiz√≥ la acci√≥n
        details: Detalles adicionales
    """
    details_info = f" | {details}" if details else ""
    logger.info(f"üë§ ACCI√ìN [{user}]: {action}{details_info}")

def logged_method(logger: logging.Logger = None, log_args: bool = True, log_result: bool = False, 
                 enable_performance: bool = False, performance_threshold: float = 1.0):
    """
    Decorador para logging autom√°tico de m√©todos.
    
    Args:
        logger: Logger a usar (si None, se obtiene del m√≥dulo)
        log_args: Si registrar argumentos de entrada
        log_result: Si registrar el resultado
        log_performance: Si registrar informaci√≥n de rendimiento
        performance_threshold: Umbral para considerar lento
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            # Obtener logger si no se proporcion√≥
            func_logger = logger or get_logger(func.__module__)
            func_name = f"{func.__qualname__}"
            
            # Log de entrada
            if log_args:
                # Filtrar 'self' de los argumentos para m√©todos de clase
                filtered_kwargs = kwargs.copy()
                if args and hasattr(args[0], '__class__'):
                    log_function_entry(func_logger, func_name, **filtered_kwargs)
                else:
                    all_args = dict(zip(func.__code__.co_varnames, args))
                    all_args.update(filtered_kwargs)
                    log_function_entry(func_logger, func_name, **all_args)
            else:
                func_logger.debug(f"üîµ ENTRADA ‚Üí {func_name}")
            
            # Ejecutar funci√≥n con medici√≥n de tiempo
            start_time = datetime.now()
            try:
                result = func(*args, **kwargs)
                execution_time = (datetime.now() - start_time).total_seconds()
                
                # Log de salida
                if log_result:
                    log_function_exit(func_logger, func_name, result, execution_time)
                else:
                    log_function_exit(func_logger, func_name, execution_time=execution_time)
                
                # Log de rendimiento
                if enable_performance:
                    log_performance(func_logger, func_name, execution_time, performance_threshold)
                
                return result
                
            except Exception as e:
                execution_time = (datetime.now() - start_time).total_seconds()
                log_exception(func_logger, func_name, e)
                raise
                
        return wrapper
    return decorator

def _safe_repr(obj: Any, max_length: int = 100) -> str:
    """
    Representaci√≥n segura de objetos para logging.
    
    Args:
        obj: Objeto a representar
        max_length: Longitud m√°xima de la representaci√≥n
    
    Returns:
        Representaci√≥n string del objeto
    """
    try:
        if obj is None:
            return "None"
        elif isinstance(obj, (str, int, float, bool)):
            repr_str = repr(obj)
        elif isinstance(obj, Decimal):
            repr_str = f"Decimal('{obj}')"
        elif isinstance(obj, (list, tuple, dict)):
            if len(str(obj)) > max_length:
                repr_str = f"{type(obj).__name__}[{len(obj)} items]"
            else:
                repr_str = repr(obj)
        else:
            repr_str = f"<{type(obj).__name__} object>"
        
        # Truncar si es muy largo
        if len(repr_str) > max_length:
            repr_str = repr_str[:max_length-3] + "..."
        
        return repr_str
    except Exception:
        return f"<{type(obj).__name__} object - repr failed>"

# Funciones de utilidad para validaci√≥n y conversi√≥n
def safe_decimal(value: Any, default: Decimal = Decimal('0.00')) -> Decimal:
    """Convierte de forma segura un valor a Decimal"""
    try:
        if value is None:
            return default
        return Decimal(str(value))
    except (InvalidOperation, ValueError, TypeError):
        return default

def validate_not_empty(value: str, field_name: str) -> bool:
    """Valida que una cadena no est√© vac√≠a"""
    if not value or not value.strip():
        raise ValueError(f"{field_name} no puede estar vac√≠o")
    return True

def format_currency(amount: Decimal) -> str:
    """Formatea un decimal como cadena de moneda"""
    return f"${amount:.2f}"

def parse_currency(value: str) -> Decimal:
    """Convierte una cadena de moneda a Decimal"""
    if not value:
        return Decimal('0.00')
    # Remover s√≠mbolos de moneda y comas
    clean_value = str(value).replace('$', '').replace(',', '')
    return safe_decimal(clean_value)

# Configuraci√≥n de logging espec√≠fica para la aplicaci√≥n
def setup_business_logging():
    """Configuraci√≥n espec√≠fica para la aplicaci√≥n de gesti√≥n de negocio"""
    configure_application_logging(
        log_level=logging.DEBUG,
        log_file='business_app.log',
        max_file_size=20*1024*1024,  # 20MB
        backup_count=10,
        enable_console_colors=True
    )
    
    # Configurar loggers espec√≠ficos para m√≥dulos cr√≠ticos
    db_logger = get_logger('Core.Database.database')
    db_logger.setLevel(logging.INFO)  # Menos verbose para DB
    
    gui_logger = get_logger('Gui')
    gui_logger.setLevel(logging.DEBUG)  # M√°s detallado para GUI